/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/

type            coded;
libs            ("libutilityFunctionObjects.so");

name            nonUniformSST;

codeWrite
#{
    #include "mathematicalConstants.H"
    using namespace constant::mathematical;

    // Get index of patch
    label patchID = mesh().boundaryMesh().findPatchID("ground");

    // x position along the boundary
    const scalarField x = mesh().C().boundaryField()[patchID]
        .component(vector::X);

    // Read in the buoyancy
    volScalarField b
    (
        IOobject
        (
            "b",
            mesh().time().timeName(),
            mesh(),
            IOobject::MUST_READ
        ),
        mesh()
    );

    // Get reference to boundary value
    fixedGradientFvPatchScalarField& groundb
         = refCast<fixedGradientFvPatchScalarField>
    (
        b.boundaryFieldRef()[patchID]
    );
    scalarField& gradb = groundb.gradient();

    // Set the surface heat flux
    const scalar L = 5e5, ell = 5e4, H = 2e-5;
    for(label i = 0; i < x.size(); i++)
    {
        if (x[i] < -L+ell || x[i] > L-ell || (x[i] > -ell && x[i] < ell))
        {
            gradb[i] = H*sqr(Foam::sin((x[i]/ell+1)*pi/4));
        }
        else if (x[i] >= ell && x[i] <= L-ell)
        {
            gradb[i] = H;
        }
        else gradb[i] = 0;
    }

    b.write();
#};

// ************************************************************************* //
