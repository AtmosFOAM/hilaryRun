/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvModels;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

codedSource
{
    type            coded;
    selectionMode   all;
    field           T;
    name            HartneyRain;

    codeOptions
    #{
        -I$(ATMOSFOAM_SRC)/finiteVolume/lnInclude
    #};

    codeInclude
    #{
        using namespace Foam;
        #include "fvmSup.H"
        #include "DemandDrivenMeshObject.H"
        #include "fvcVolumeIntegrate.H"
        #include "RKfield.H"
        #include "butcherTableau.H"
        using namespace Foam::constant::mathematical;
    #};

    codeAddSup
    #{
        class moisture: public DemandDrivenMeshObject
                        <fvMesh, GeometricMeshObject, moisture>
        {
            public:
                volScalarField rain;
                volScalarField qsat;
                const dimensionedScalar waterSum0;

                explicit moisture(const fvMesh& mesh, const volScalarField& q)
                :
                    DemandDrivenMeshObject
                         <fvMesh, Foam::GeometricMeshObject, moisture>(mesh),
                    rain(IOobject("rain", "0", mesh,
                            IOobject::MUST_READ, IOobject::AUTO_WRITE), mesh),
                    qsat(IOobject("qsat", "0", mesh,
                            IOobject::NO_READ, IOobject::AUTO_WRITE), q),
                    waterSum0(fvc::domainIntegrate(q+rain))
                {rain.oldTime();}
                
                virtual ~moisture(){}
        };

        // Data from the code
        const volVectorField& C = mesh().C();
        const Time& time = mesh().time();
        const scalarField& V = mesh().V();
        scalarField& TSource = eqn.source();
        const volScalarField& T = mesh().lookupObject<volScalarField>(fieldName);
        const RKfield<scalar, fvPatchField, volMesh>& Ts
             = mesh().lookupObject<RKfield<scalar, fvPatchField, volMesh>>
        (fieldName+"s");
        const label iRK = Ts.iRK();
        const butcherTableau& BT = Ts.BT();

        moisture& moist = moisture::New(mesh(), T);

        // Evaporation timescale
        const dimensionedScalar evapTimeScale = time.deltaT();
        // Saturation profile
        scalar Csat = 0.75;
        scalar Ksat = 0.25;
        dimensionedScalar L(dimLength, 1);
        moist.qsat = Csat + Ksat*cos(2*pi*C.component(0)/L);
        // Where is is supersaturated
        const volScalarField& T0 = iRK > 0? Ts[iRK-1] : T.oldTime();
        volScalarField whereSuper("whereSuper", max(sign(T0 - moist.qsat),scalar(0)));
        
        eqn -= fvm::Sp(BT.subTimes()[iRK]*whereSuper/evapTimeScale, T);
        TSource -= BT.subTimes()[iRK]*whereSuper*moist.qsat/evapTimeScale.value()*V;
        //TSource += BT.subTimes()[iRK]*whereSuper*(T-moist.qsat)/evapTimeScale.value()*V;
        volScalarField r = BT.subTimes()[iRK]*time.deltaT()*whereSuper/evapTimeScale
                            *(T - moist.qsat);
        moist.rain = moist.rain.oldTime() + r;
        
        /*dimensionedScalar waterSum = fvc::domainIntegrate(T + moist.rain);
        Info << "BT.subTimes()[" << iRK << "] = " << BT.subTimes()[iRK]
             << " waterSum = " << waterSum.value() << " normalised error = "
             << ((waterSum - moist.waterSum0)/moist.waterSum0).value() << endl;
        */
        if (time.timeName() == "0")
        {
            moist.qsat.write();
            moist.rain.write();
        }
     #};
}

// ************************************************************************* //
