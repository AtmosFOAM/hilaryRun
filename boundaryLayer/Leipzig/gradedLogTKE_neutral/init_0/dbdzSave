/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      k;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 -2 0 0 0 0];

internalField   nonuniform #codeStream
{
    codeInclude
    #{
        #include "fvCFD.H"
    #};
    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};
    codeLibs
    #{
        -lmeshTools \
        -lfiniteVolume
    #};
   
    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());

        // Set constants specific to the buoyancy profile
        const scalar ustar = 0.65;
        const scalar L  = 580;
        const scalar beta = 4.7;
        const scalar zMid = 100;
        const scalar heightScale = 520;
        
        // Look up coefficients set elsewhere (or just set them here)
        const scalar z0 = 0.3;
        const scalar sigmaTheta = 0.74;
        const scalar kappa = 0.41;
        
        // z from the mesh
        const scalarField z = mesh.C().component(2);

        scalarField dbdz(mesh.nCells(), scalar(0));
        forAll(dbdz, cellI)
        {
            dbdz[cellI] = sigmaTheta*(sigmaTheta + beta*z[cellI]/L)*sqr(ustar)
                    /(sigmaTheta*sqr(kappa)*z[cellI]*L);
            if (z[cellI] > zMid)
            {
                dbdz[cellI] *= exp(-(z[cellI]-zMid)/heightScale);
            }
        }
        
        const scalar dbdz_z0 = sigmaTheta*(sigmaTheta + beta*z0/L)*sqr(ustar)
                    /(sigmaTheta*sqr(kappa)*z0*L);
        Info << "dbdz_z0 = " << dbdz_z0 << endl;
        os << dbdz;
    #};
};

boundaryField
{
    ground
    {
        type            fixedValue;
        value           uniform 0.0107242;
    }
    top
    {
        type            fixedValue;
        value           uniform 1.37e-7;
    }
    inlet
    {
        type            cyclic;
    }
    outlet
    {
        type            cyclic;
    }
    front
    {
        type            cyclic;
    }
    back
    {
        type            cyclic;
    }
}


// ************************************************************************* //
